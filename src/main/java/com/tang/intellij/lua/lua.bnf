/*
 * Copyright (c) 2017. tarantoolluazx(love.tarantoolluazx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tarantoollua.intellij.lua.parser.LuaParser"

  implements="com.tarantoollua.intellij.lua.psi.LuaPsiElement"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lua"
  psiImplClassSuffix="Impl"
  psiPackage="com.tarantoollua.intellij.lua.psi"
  psiImplPackage="com.tarantoollua.intellij.lua.psi.impl"
  psiImplUtilClass="com.tarantoollua.intellij.lua.psi.LuaPsiImplUtilKt"

  parserUtilClass="com.tarantoollua.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tarantoollua.intellij.lua.psi.LuaTypes"
  elementTypeClass="com.tarantoollua.intellij.lua.psi.LuaElementType"
  elementTypeFactory="com.tarantoollua.intellij.lua.lang.LuaParserDefinitionKt.createType"
  tokenTypeClass="com.tarantoollua.intellij.lua.psi.LuaTokenType"
  tokenTypeFactory="com.tarantoollua.intellij.lua.lang.LuaParserDefinitionKt.createToken"
  parserImports = "static com.intellij.lang.WhitespacesBinders.*"

  tokens = [
        /* Keywords */
        AND = "and"
        BREAK = "break"
        DO = "do"
        ELSE = "else"
        ELSEIF = "elseif"
        END = "end"
        FALSE = "false"
        FOR = "for"
        FUNCTION = "function"
        IF = "if"
        IN = "in"
        LOCAL = "local"
        NIL = "nil"
        NOT = "not"
        OR = "or"
        REPEAT = "repeat"
        RETURN = "return"
        THEN = "then"
        TRUE = "true"
        UNTIL = "until"
        WHILE = "while"
        REGION = "REGION"
        ENDREGION = "ENDREGION"

        SHEBANG = "#!"
        SHEBANG_CONTENT = "SHEBANG_CONTENT"
        ELLIPSIS = "..."
        CONCAT = ".."
        EQ = "=="
        GE = ">="
        LE = "<="
        NE = "~="
        MINUS = "-"
        PLUS = "+"
        MULT = "*"
        MOD = "%"
        DIV = "/"
        ASSIGN = "="
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LCURLY = "{"
        RCURLY = "}"
        GETN = "#"
        COMMA = ","
        SEMI = ";"
        COLON = ":"
        DOT = "."
        EXP = "^"

        SHORT_COMMENT="SHORT_COMMENT"
        DOC_COMMENT="DOC_COMMENT"
        BLOCK_COMMENT="BLOCK_COMMENT"
        ID="regexp:[A-Za-z_][A-Za-z0-9_]*"
        NUMBER="NUMBER"
        STRING = "STRING"

        //lua 5.3
        DOUBLE_COLON = "::"
        GOTO = "goto"
        BIT_OR = "|"
        BIT_AND = "&"
        BIT_LTLT = "<<"
        BIT_RTRT = ">>"
        BIT_TILDE = "~"
        DOUBLE_DIV = "//"
  ]

  hooks("localDef|assignStat|tableField") = [leftBinder="MY_LEFT_COMMENT_BINDER" rightBinder="MY_RIGHT_COMMENT_BINDER"]
  hooks("funcDef|localFuncDef|classMethodDef") = [leftBinder="MY_LEFT_COMMENT_BINDER"]
  hooks("fieldList") = [leftBinder="GREEDY_LEFT_BINDER" rightBinder="GREEDY_RIGHT_BINDER"]
  extends(".*Expr") = expr
  extends(".*Stat") = statement
  hooks(".*Stat") = [leftBinder="MY_LEFT_COMMENT_BINDER"]
}

luaFile ::= shebang_line? stat_semi*

shebang_line ::= SHEBANG SHEBANG_CONTENT

private stat_semi ::= <<parseStatement>>
block ::= stat_semi* {
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
}

fake statement ::= () {
    implements = "com.tarantoollua.intellij.lua.psi.LuaCommentOwner"
    methods = [getComment]
}
private stat_impl ::=
    emptyStat |
    doStat |
    whileStat |
    repeatStat |
    ifStat |
    forAStat |
    forBStat |
    defStat |
    lastStat |
    labelStat |
    gotoStat |
    assignStat |
    exprStat {
        recoverWhile = stat_recover
    }
private stat_recover ::= !(ID
    | ',' | ';'
    | 'local' | 'do' | 'while' | 'repeat' | 'function' | 'if' | 'for' | 'return' | break
    | nil | true | false | STRING | NUMBER | '::' | 'goto'
    | unaryOp)

emptyStat ::= ';'

varList ::= varExpr (',' varExpr)* {
    extends = exprList
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
assignStat ::= varList '=' exprList {
    pin = 2
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaDeclaration"
    ]
    methods = [assign = 'ASSIGN' varExprList = '/exprList[0]' valueExprList = '/exprList[1]']
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaStatMixin<com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub>"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
doStat ::= 'do' <<lazyBlock>> 'end' {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaStatMixin<com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub>"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
whileStat ::= 'while' expr 'do' <<lazyBlock>> 'end' {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaLoop"
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
    ]
}
repeatStat ::= 'repeat' <<lazyBlock>> 'until' expr {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaLoop"
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
    methods = [
        until = 'UNTIL'
    ]
}
ifStat ::= 'if' expr 'then' <<lazyBlock>> ('elseif' expr 'then' <<lazyBlock>>)* ('else' <<lazyBlock>>)? 'end' {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaStatMixin<com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub>"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
forAStat ::= 'for' paramNameDef '=' expr ',' expr (',' expr)? 'do' <<lazyBlock>> 'end' {
    pin = 3
    methods = [getParamNameDefList]
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaParametersOwner"
        "com.tarantoollua.intellij.lua.psi.LuaLoop"
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
}
forBStat ::= 'for' parList 'in' exprList 'do' <<lazyBlock>> 'end' {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaParametersOwner"
        "com.tarantoollua.intellij.lua.psi.LuaLoop"
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
}
labelStat ::= '::' ID '::' {
    pin = 1
    implements = [
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    methods = [
        getNameIdentifier
        getTextOffset
        setName
        getName
    ]
}
gotoStat ::= 'goto' ID {
    pin = 1
    methods = [
        getReferences
    ]
}
private defStat ::= classMethodDef | funcDef | localFuncDef | localDef
exprStat ::= expr {
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaStatMixin<com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub>"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}

funcDef ::= 'function' ID funcBody {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaClassMethod"
        "com.tarantoollua.intellij.lua.psi.LuaDeclaration"
        "com.tarantoollua.intellij.lua.psi.LuaStatement"
    ]
    methods = [
        getComment
        getPresentation
        getParamNameDefList
        getNameIdentifier
        setName
        getName
        getTextOffset
        toString
        guessReturnType
        guessParentType
        getVisibility
        getWorth
        isDeprecated
        getParams
        getReferences
    ]
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaFuncStub"
}

private checkFuncPrefix ::= ID ('.' | ':') ID

left funcPrefixRef ::= '.' <<repeat checkFuncPrefix 1>> ID { extends = indexExpr elementType = indexExpr }
classMethodName ::=  nameExpr (funcPrefixRef)* (('.' ID) | (':' ID)) {
    pin = 1
    methods = [
        dot = 'DOT'
        colon = 'COLON'
    ]
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub'
}
classMethodDef ::= 'function' classMethodName funcBody {
    pin = 2
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaClassMethod"
        "com.tarantoollua.intellij.lua.psi.LuaDeclaration"
        "com.tarantoollua.intellij.lua.psi.LuaStatement"
    ]
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaClassMethodStub"
    methods = [
        getComment
        guessParentType
        getVisibility
        getWorth
        isDeprecated
        getParamNameDefList
        getNameIdentifier
        setName
        getName
        getTextOffset
        toString
        guessReturnType
        getParams
        isStatic
        getPresentation
    ]
}

localFuncDef ::= 'local' 'function' ID funcBody {
    pin = 2
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaFuncBodyOwner"
        "com.tarantoollua.intellij.lua.psi.LuaDeclaration"
        "com.tarantoollua.intellij.lua.psi.LuaStatement"
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    methods = [
        getComment
        getParamNameDefList
        getNameIdentifier
        setName
        getName
        getTextOffset
        getUseScope
        guessReturnType
        getParams
    ]
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaLocalFuncDefStub'
}
attribute ::= '<' ID '>' {
    pin = 1
}
nameList ::= nameDef attribute? (',' nameDef attribute?)* {
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
localDef ::= 'local' nameList ('=' exprList)? {
    pin = 1
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaDeclaration"
        "com.tarantoollua.intellij.lua.psi.LuaStatement"
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
    methods = [getComment assign = 'ASSIGN']
}

returnStat ::= return exprList? {
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaStatMixin<com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub>"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}
breakStat ::= break
private lastStat ::= returnStat | breakStat

exprList ::= expr (',' expr)* {
    methods = [guessTypeAt]
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub"
}

literalExpr ::= nil | false | true | NUMBER | STRING | "..." {
    mixin = 'com.tarantoollua.intellij.lua.psi.impl.LuaLiteralExprMixin'
    implements = [
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaLiteralExprStub>"
    ]
    //stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaExprStub'
}
stringExpr ::= STRING {
    extends = literalExpr
    elementType = literalExpr
}

private varExpr ::= primaryExpr

expr ::= <<parseExpr>> {
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaExprMixin"
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaExprStub"
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaTypeGuessable"
    ]
}

parenExpr ::= '(' expr ')' {
    pin = 1
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaExprStub'
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaParenExprMixin"
}
unaryExpr ::= unaryOp (unaryExpr | primaryExpr) {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaUnaryExprStub>"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaUnaryExprMixin"
}

left binaryExpr ::= binaryOp expr {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaBinaryExprStub>"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaBinaryExprMixin"
}

left indexExpr ::= '[' expr ']' | '.' ID | ':' ID {
    pin(".*") = 1
    methods = [
        getNameIdentifier
        setName
        getName
        getTextOffset
        getPresentation
        getIdExpr
        toString

        guessParentType
        isDeprecated

        dot = 'DOT'
        colon = 'COLON'
        lbrack = 'LBRACK'
    ]
    implements = [
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.tarantoollua.intellij.lua.psi.LuaClassMember"
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaIndexExprStub>"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaIndexExprMixin"
}

args ::= listArgs | singleArg {
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub'
}
singleArg ::= tableExpr | stringExpr { extends = args }
private arg_expr_list ::= (expr ',')* (expr |& ')') { pin = 1 }
listArgs ::= '(' (arg_expr_list)? ')' { extends = args pin = 1 }

left callExpr ::= args {
    methods = [
        guessParentType
        getFirstStringArg

        isMethodDotCall
        isMethodColonCall
        isFunctionCall
    ]
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaExprStub'
    mixin = 'com.tarantoollua.intellij.lua.psi.impl.LuaCallExprMixin'
}

private suffixExpr ::= indexExpr | callExpr
private prefixExpr ::= parenExpr | nameExpr | tableExpr | literalExpr
// prefixExpr | callExpr | indexExpr
private primaryExpr ::= prefixExpr (suffixExpr*)

closureExpr ::= 'function' funcBody {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaFuncBodyOwner"
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaClosureExprStub>"
    ]
    methods = [getParamNameDefList guessReturnType getParams]
    mixin = 'com.tarantoollua.intellij.lua.psi.impl.LuaClosureExprMixin'
}

funcBody ::= '(' (parList)? ')' <<lazyBlock>>? 'end' {
    pin = 1
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
        "com.tarantoollua.intellij.lua.psi.LuaDeclarationScope"
    ]
    methods = [
        RPAREN = 'RPAREN'
        ELLIPSIS = 'ELLIPSIS'
    ]
    stubClass = 'com.tarantoollua.intellij.lua.stubs.LuaPlaceholderStub'
}

private parList ::= paramNameDef (',' paramNameDef)* (',' '...')? | '...' { recoverWhile = parList_recover }
private parList_recover ::= !(')'|'in')

tableExpr ::= '{' fieldList '}' {
    pin = 1
    methods = [
        findField
    ]
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaIndentRange"
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaTableExprStub>"
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaTableExprMixin"
}

private fieldList ::= (tableField (tableFieldSep tableField)* (tableFieldSep)?)?

private tableField1 ::= '[' expr ']' '=' expr { pin = 1 }
private tableField2 ::= ID '=' expr { pin = 2 }

tableField ::= tableField1 | tableField2 | expr {
    methods = [
        getNameIdentifier
        setName
        getName
        getTextOffset

        toString

        getFieldName
        getPresentation
        guessParentType
        getVisibility
        getWorth
        isDeprecated
        getComment
        getIdExpr
        nameDef = "tableFieldNameDef"
        lbrack = 'LBRACK'
    ]
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaTableFieldStub"
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaClassField"
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.tarantoollua.intellij.lua.psi.LuaCommentOwner"
    ]
    recoverWhile = tableField_recover
}

private tableField_recover ::= !(tableFieldSep | '}' | '[')

tableFieldSep ::= ',' | ';'

binaryOp ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' |
    '<' | '<=' | '>' | '>=' | '==' | '~=' |
    'and' | 'or'
    // lua5.3
    | '|' | '&' | '>>' | '<<' | '~' | '//'

unaryOp ::= '-' | 'not' | '#'
    // lua5.3
    | '~'

nameDef ::= ID {
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaNamedElement"
        "com.tarantoollua.intellij.lua.psi.LuaTypeGuessable"
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    methods = [
        getName
        setName
        getNameIdentifier
        getUseScope
    ]
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaNameDefStub"
}
nameExpr ::= ID {
    implements = [
        "com.tarantoollua.intellij.lua.psi.LuaPsiElement"
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.tarantoollua.intellij.lua.stubs.LuaExprStubElement<com.tarantoollua.intellij.lua.stubs.LuaNameExprStub>"
        "com.tarantoollua.intellij.lua.psi.LuaModuleClassField"
    ]
    methods = [
        setName
        getName
        getNameIdentifier
        getPresentation
        getReferences
        isDeprecated

        toString
    ]
    mixin = "com.tarantoollua.intellij.lua.psi.impl.LuaNameExprMixin"
}
paramNameDef ::= ID {
    extends = nameDef
    stubClass = "com.tarantoollua.intellij.lua.stubs.LuaNameDefStub"
}