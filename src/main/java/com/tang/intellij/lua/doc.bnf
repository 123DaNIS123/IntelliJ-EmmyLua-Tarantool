/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.tang.intellij.lua.comment.parser.LuaDocParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.tang.intellij.lua.comment.psi.LuaDocPsiElement"

  psiClassPrefix="LuaDoc"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.comment.psi"
  psiImplPackage="com.tang.intellij.lua.comment.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.comment.psi.LuaDocPsiImplUtil"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.comment.psi.LuaDocTypes"
  elementTypeClass="com.tang.intellij.lua.comment.psi.LuaDocElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createDocType"
  tokenTypeClass="com.tang.intellij.lua.comment.psi.LuaDocTokenType"

  tokens = [
        ID="regexp:[A-Za-z0-9_]+"
        AT = '@'
        SHARP = '#'
        EQ = '='
        COMMA = ','
        TAG_NAME = 'TAG_NAME'
        TAG_PARAM = 'param'
        TAG_RETURN = 'return'
        PROTECTED = 'protected'
        PUBLIC = 'public'
        CLASS = 'class'
        FIELD = 'field'
        DASHES = 'DASHES'
        STRING_BEGIN = 'STRING_BEGIN'
        STRING = 'STRING'
        TYPE = 'type'
  ]
}

doc ::= (DASHES after_dash?)*

private after_dash ::= doc_item | STRING //{ recoverWhile=after_dash_recover }
//private after_dash_recover ::= !(DASHES)
private doc_item ::= '@' (param_def | return_def | tag_def | class_def | field_def | type_def) comment_string?

//todo : remove # ,
type_set ::= '#'? class_name_ref (','? class_name_ref)*
access_modifier ::= "protected" | "public"

field_def ::= FIELD access_modifier ID type_set {
    pin = 1
    implements = [
        "com.tang.intellij.lua.psi.LuaClassField"
        "com.tang.intellij.lua.comment.psi.LuaDocPsiElement"
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    stubClass = "com.tang.intellij.lua.stubs.LuaDocClassFieldStub"
    methods = [
        guessType
        getNameIdentifier
        setName
        getName
        getTextOffset
        getFieldName
        toString
    ]
}

//--- tag
tag_value ::= ID
tag_def ::= TAG_NAME tag_value? { pin = 1 }

//@param PARAM_NAME CLASS_REF
param_name_ref ::= ID {
    methods = [getReference]
}
param_def ::= TAG_PARAM param_name_ref type_set {
    pin = 1
    methods = [guessType]
}

//--- return
type_list ::= type_set+
return_def ::= TAG_RETURN type_list {
    pin = 1
    methods = [resolveTypeAt]
}

class_name_ref ::= ID {
    methods = [getReference resolveType]
}
class_def ::= CLASS ID (EXTENDS class_name_ref)?  {
    pin = 2
    implements = [
        "com.tang.intellij.lua.comment.psi.LuaDocPsiElement"
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    stubClass = "com.tang.intellij.lua.stubs.LuaDocClassStub"
    methods = [
        getClassType
        
        getPresentation
        getNameIdentifier
        setName
        getName
        getTextOffset
        toString

        superClassNameRef = 'class_name_ref'
    ]
}

// @type CLASS_REF
type_def ::= TYPE type_set { pin = 1 methods = [guessType] }

comment_string ::= STRING_BEGIN STRING? { pin = 1 }