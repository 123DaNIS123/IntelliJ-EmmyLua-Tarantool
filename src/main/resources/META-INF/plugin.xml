<!--
  ~ Copyright (c) 2017. tangzx(love.tangzx@qq.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<idea-plugin version="2">
    <id>com.tang</id>
    <name>Lua IDE</name>
    <version>1.0.6</version>
    <vendor email="love.tangzx@qq.com">tangzx</vendor>

    <description><![CDATA[
    A lua plugin for IDEA<br>
    QQ : 272669294<br>
    QQGroup : 29850775
    ]]></description>

    <change-notes><![CDATA[

    ]]>
    </change-notes>

    <!-- please see https://confluence.jetbrains.com/display/IDEADEV/Build+Number+Ranges for description -->
    <idea-version since-build="163" until-build="163.*"/>

    <!-- please see https://confluence.jetbrains.com/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
         on how to target different products -->
    <depends>com.intellij.modules.lang</depends>

    <extensions defaultExtensionNs="com.intellij">
        <createFromTemplateHandler implementation="com.tang.intellij.lua.actions.LuaCreateFromTemplateHandler"/>
        <moduleType id="LUA_MODULE" implementationClass="com.tang.intellij.lua.project.LuaModuleType"/>
        <moduleConfigurationEditorProvider implementation="com.tang.intellij.lua.project.LuaModuleConfigurationEditorProvider"/>
        <sdkType implementation="com.tang.intellij.lua.project.LuaSdkType"/>
        <library.type implementation="com.tang.intellij.lua.project.LuaLibraryType"/>
        <!-- Add your extensions here -->
        <lang.foldingBuilder language="Lua" implementationClass="com.tang.intellij.lua.folding.LuaFoldingBuilder"/>
        <lang.braceMatcher language="Lua" implementationClass="com.tang.intellij.lua.braces.LuaBraceMatcher"/>
        <lang.syntaxHighlighterFactory language="Lua" implementationClass="com.tang.intellij.lua.highlighting.LuaSyntaxHighlighterFactory"/>
        <lang.parserDefinition language="Lua" implementationClass="com.tang.intellij.lua.lang.LuaParserDefinition"/>
        <lang.findUsagesProvider language="Lua" implementationClass="com.tang.intellij.lua.usages.LuaFindUsagesProvider"/>
        <lang.documentationProvider language="Lua" implementationClass="com.tang.intellij.lua.documentation.LuaDocumentationProvider"/>
        <lang.psiStructureViewFactory language="Lua" implementationClass="com.tang.intellij.lua.editor.LuaStructureViewFactory"/>
        <lang.commenter language="Lua" implementationClass="com.tang.intellij.lua.editor.LuaCommenter"/>
        <lang.quoteHandler language="Lua" implementationClass="com.tang.intellij.lua.codeInsight.editorActions.LuaQuoteHandler"/>
        <highlightErrorFilter implementation="com.tang.intellij.lua.highlighting.LuaHighlightErrorFilter"/>

        <!--rename-->
        <lang.refactoringSupport language="Lua" implementationClass="com.tang.intellij.lua.editor.LuaRefactoringSupportProvider"/>
        <nameSuggestionProvider implementation="com.tang.intellij.lua.editor.LuaNameSuggestionProvider"/>
        <qualifiedNameProvider implementation="com.tang.intellij.lua.editor.LuaQualifiedNameProvider"/>

        <psi.referenceContributor language="Lua" implementation="com.tang.intellij.lua.reference.LuaReferenceContributor"/>
        <gotoClassContributor implementation="com.tang.intellij.lua.editor.LuaClassNavigationContributor"/>
        <gotoSymbolContributor implementation="com.tang.intellij.lua.editor.LuaSymbolNavigationContributor"/>
        <fileTypeFactory implementation="com.tang.intellij.lua.lang.LuaFileTypeFactory"/>
        <completion.contributor language="Lua" implementationClass="com.tang.intellij.lua.editor.completion.LuaCompletionContributor"/>
        <completion.contributor language="Lua" implementationClass="com.tang.intellij.lua.editor.completion.LuaCommentCompletionContributor"/>

        <codeInsight.lineMarkerProvider language="Lua" implementationClass="com.tang.intellij.lua.codeInsight.LuaLineMarkerProvider"/>
        <codeInsight.parameterNameHints language="Lua" implementationClass="com.tang.intellij.lua.codeInsight.LuaParameterHintsProvider"/>
        <codeInsight.parameterInfo language="Lua" implementationClass="com.tang.intellij.lua.codeInsight.LuaParameterInfoHandler"/>
        <codeInsight.template.postfixTemplateProvider language="Lua" implementationClass="com.tang.intellij.lua.codeInsight.postfix.LuaPostfixTemplateProvider"/>
        <highlightUsagesHandlerFactory implementation="com.tang.intellij.lua.codeInsight.highlighting.LuaHighlightUsagesHandlerFactory"/>

        <enterHandlerDelegate implementation="com.tang.intellij.lua.codeInsight.LuaEnterAfterUnmatchedBraceHandler" />
        <enterHandlerDelegate implementation="com.tang.intellij.lua.codeInsight.LuaEnterInDocHandler"/>
        <enterHandlerDelegate implementation="com.tang.intellij.lua.codeInsight.LuaEnterBetweenBracesHandler"/>

        <backspaceHandlerDelegate implementation="com.tang.intellij.lua.codeInsight.LuaBackspaceHandlerDelegate"/>
        <annotator language="Lua" implementationClass="com.tang.intellij.lua.annotator.LuaAnnotator" />
        <problemFileHighlightFilter implementation="com.tang.intellij.lua.highlighting.LuaProblemFileHighlightFilter"/>
        <stubElementTypeHolder class="com.tang.intellij.lua.psi.LuaTypes" />
        <stubElementTypeHolder class="com.tang.intellij.lua.comment.psi.LuaDocTypes"/>
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaGlobalFuncIndex" />
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaClassIndex"/>
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaClassMethodIndex"/>
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaGlobalVarIndex"/>
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaClassFieldIndex"/>
        <stubIndex implementation="com.tang.intellij.lua.stubs.index.LuaShortNameIndex"/>
        <typedHandler implementation="com.tang.intellij.lua.editor.LuaAutoPopupHandler"/>
        <typedHandler implementation="com.tang.intellij.lua.editor.LuaAutoIndentHandler"/>

        <lang.surroundDescriptor language="Lua" implementationClass="com.tang.intellij.lua.editor.surroundWith.LuaSurroundDescriptor"/>

        <!-- color -->
        <colorSettingsPage implementation="com.tang.intellij.lua.editor.LuaColorSettingsPage"/>
        <additionalTextAttributes scheme="Default" file="colorSchemes/Default.xml"/>
        <additionalTextAttributes scheme="Darcula" file="colorSchemes/Darcula.xml"/>

        <!-- formatting -->
        <lang.formatter language="Lua" implementationClass="com.tang.intellij.lua.editor.formatter.LuaFormattingModelBuilder"/>
        <codeStyleSettingsProvider implementation="com.tang.intellij.lua.editor.formatter.LuaCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider implementation="com.tang.intellij.lua.editor.formatter.LuaLanguageCodeStyleSettingsProvider"/>

        <!-- debugger -->
        <programRunner implementation="com.tang.intellij.lua.debugger.LuaDebuggerRunner"/>
        <configurationType implementation="com.tang.intellij.lua.debugger.LuaConfigurationType"/>
        <xdebugger.breakpointType implementation="com.tang.intellij.lua.debugger.LuaLineBreakpointType"/>
        <xdebugger.localAttachDebuggerProvider implementation="com.tang.intellij.lua.debugger.attach.LuaLocalAttachDebuggerProvider"/>

        <intentionAction>
            <category>Lua</category>
            <className>com.tang.intellij.lua.codeInsight.intention.CreateParamDocIntention</className>
            <descriptionDirectoryName>CreateParamDocIntention</descriptionDirectoryName>
        </intentionAction>
        <intentionAction>
            <category>Lua</category>
            <className>com.tang.intellij.lua.codeInsight.intention.CreateTypeDeclarationIntention</className>
            <descriptionDirectoryName>CreateTypeDeclarationIntention</descriptionDirectoryName>
        </intentionAction>
        <intentionAction>
            <category>Lua</category>
            <className>com.tang.intellij.lua.codeInsight.intention.CreateReturnDocIntention</className>
            <descriptionDirectoryName>CreateReturnDocIntention</descriptionDirectoryName>
        </intentionAction>
        <intentionAction>
            <category>Lua</category>
            <className>com.tang.intellij.lua.codeInsight.intention.CreateDocForMethodIntention</className>
            <descriptionDirectoryName>CreateDocForMethodIntention</descriptionDirectoryName>
        </intentionAction>
        <intentionAction>
            <category>Lua</category>
            <className>com.tang.intellij.lua.codeInsight.intention.CreateFieldFromParameterIntention</className>
            <descriptionDirectoryName>CreateFieldFromParameterIntention</descriptionDirectoryName>
        </intentionAction>

        <localInspection
                implementationClass="com.tang.intellij.lua.codeInsight.inspection.DuplicateClassDeclaration"
                displayName="Duplicate Class"
                enabledByDefault="true"
                level="ERROR"
                groupName="Lua"/>
        <localInspection
                implementationClass="com.tang.intellij.lua.codeInsight.inspection.LocalAssignCanBeSimpler"
                displayName="Local assign can be simpler"
                enabledByDefault="true"
                groupName="Lua"/>
        <localInspection
                displayName="Lua Standard Compliance"
                enabledByDefault="true"
                groupName="Lua"
                implementationClass="com.tang.intellij.lua.codeInsight.inspection.LuaStandardCompliance"/>
        <localInspection
                displayName="Remove Unused"
                enabledByDefault="true"
                groupName="Lua"
                implementationClass="com.tang.intellij.lua.codeInsight.inspection.RemoveUnusedLocal"/>
        <localInspection
                displayName="Empty body"
                enabledByDefault="true"
                groupName="Lua"
                implementationClass="com.tang.intellij.lua.codeInsight.inspection.EmptyBody"/>
        
        <defaultLiveTemplatesProvider implementation="com.tang.intellij.lua.codeInsight.LuaLiveTemplatesProvider"/>
        <liveTemplateContext implementation="com.tang.intellij.lua.codeInsight.LuaCodeTemplateContextType"/>
    </extensions>

    <application-components>
        <component>
            <implementation-class>com.tang.intellij.lua.project.StdSDK</implementation-class>
        </component>
    </application-components>

    <project-components>
        <!-- Add your project components here -->
    </project-components>

    <actions>
        <action class="com.tang.intellij.lua.actions.CreateLuaFileAction"
                text="Lua File"
                id="lua.newFile">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile"/>
        </action>
    </actions>

</idea-plugin>