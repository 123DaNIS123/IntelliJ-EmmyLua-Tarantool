{
  parserClass="com.tang.intellij.lua.parser.LuaParser"

  implements="com.tang.intellij.lua.psi.LuaPsiElement"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lua"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.psi"
  psiImplPackage="com.tang.intellij.lua.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.psi.LuaPsiImplUtil"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.psi.LuaTypes"
  elementTypeClass="com.tang.intellij.lua.psi.LuaElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createType"
  tokenTypeClass="com.tang.intellij.lua.psi.LuaTokenType"
  tokenTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createToken"

  tokens = [
        /* Keywords */
        AND = "and"
        BREAK = "break"
        DO = "do"
        ELSE = "else"
        ELSEIF = "elseif"
        END = "end"
        FALSE = "false"
        FOR = "for"
        FUNCTION = "function"
        IF = "if"
        IN = "in"
        LOCAL = "local"
        NIL = "nil"
        NOT = "not"
        OR = "or"
        REPEAT = "repeat"
        RETURN = "return"
        THEN = "then"
        TRUE = "true"
        UNTIL = "until"
        WHILE = "while"
        SELF = "self"

        SHEBANG = "#!"
        ELLIPSIS = "..."
        CONCAT = ".."
        EQ = "=="
        GE = ">="
        LE = "<="
        NE = "~="
        MINUS = "-"
        PLUS = "+"
        MULT = "*"
        MOD = "%"
        DIV = "/"
        ASSIGN = "="
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LCURLY = "{"
        RCURLY = "}"
        GETN = "#"
        COMMA = ","
        SEMI = ";"
        COLON = ":"
        DOT = "."
        EXP = "^"

        SHORT_COMMENT="SHORT_COMMENT"
        DOC_COMMENT="DOC_COMMENT"
        ID="regexp:[A-Za-z_][A-Za-z0-9_]*"
        NUMBER="NUMBER"
        STRING = "STRING"
  ]

  implements("localDef|assignStat") = "com.tang.intellij.lua.psi.LuaDeclaration"
  implements("globalFuncDef|localFuncDef|classMethodDef") = "com.tang.intellij.lua.psi.LuaFuncBodyOwner, com.tang.intellij.lua.psi.LuaDeclaration"
  implements("lambdaFuncDef") = "com.tang.intellij.lua.psi.LuaFuncBodyOwner"
  implements("expr|funcCall") = "com.tang.intellij.lua.psi.LuaExpression"
  extends(".*Expr") = expr
}

luaFile ::= stat_or_comment*

private stat_or_comment ::= SHORT_COMMENT | DOC_COMMENT | stat ';'?
private chunk ::= stat_or_comment* (lastStat ';'?)?

private lazy_block ::= <<lazyBlock>>
block ::= chunk

private stat ::=
    funcCall |
    assignStat |
    doStat |
    whileStat |
    repeatStat |
    ifStat |
    forAStat |
    forBStat |
    classMethodDef |
    globalFuncDef |
    localFuncDef |
    localDef |
    lastStat

assignStat ::= varList '=' exprList { pin = 1 methods = [getComment] }
doStat ::= 'do' lazy_block 'end' { pin = 1 }
whileStat ::= 'while' expr 'do' lazy_block 'end' { pin = 1 }
repeatStat ::= 'repeat' lazy_block 'until' expr { pin = 1 }
ifStat ::= 'if' expr 'then' lazy_block ('elseif' expr 'then' lazy_block)* ('else' lazy_block)? 'end' { pin = 1 }
forAStat ::= 'for' nameDef '=' expr ',' expr (',' expr)? 'do' lazy_block 'end' { pin = 3 }
forBStat ::= 'for' nameList 'in' exprList 'do' lazy_block 'end' { pin = 1 }

globalFuncDef ::= 'function' nameDef funcBody {
    pin = 1
    methods = [getComment]
    stubClass = "com.tang.intellij.lua.psi.stub.LuaGlobalFuncStub"
}

private checkFuncPrefix ::= ID ('.' | ':') ID

left funcPrefixRef ::= '.' <<checkNext checkFuncPrefix>> nameRef
classMethodName ::=  nameRef (funcPrefixRef)* (('.' ID) | (':' ID)) { pin = 3 }
classMethodDef ::= 'function' classMethodName funcBody {
    pin = 2
    stubClass = "com.tang.intellij.lua.psi.stub.LuaClassMethodStub"
    methods = [getComment]
}

localFuncDef ::= 'local' 'function' nameDef funcBody {
    pin = 2
    methods = [getComment]
}
localDef ::= 'local' nameList ('=' exprList)? {
    pin = 1
    methods = [getComment]
}

lastStat ::= return exprList? | break

varList ::= var (',' var)*

nameList ::= nameDef (',' nameDef)*

exprList ::= (expr ',')* expr

valueExpr ::= nil | false | true | NUMBER | STRING | "..." | lambdaFuncDef | tableConstructor | funcCall | var | '(' expr ')'

expr ::= unopExpr | binopExpr | valueExpr { mixin = "com.tang.intellij.lua.psi.impl.LuaExpressionImpl" }

unopExpr ::= unop expr { pin = 1 }
binopExpr ::= valueExpr binop expr { pin = 2 }

private prefixExpr ::= '(' expr ')' | nameRef

private checkIndexExpr ::= '[' expr ']' | '.' ID { pin(".*") = 1 }

left indexExpr ::= '[' expr ']' | '.' ID {
    pin(".*") = 1
    methods = [guessPrefixType getReference]
}

private checkCallExpr ::= args | ':' ID args { pin(".*") = 1 }

left callExpr ::= args | ':' ID args { pin(".*") = 1 methods = [getReference guessPrefixType] }

private suffixIndexExpr ::= callExpr | <<twoExpr checkIndexExpr>> indexExpr
// 最终产生 index expr | nameRef
var ::= prefixExpr (suffixIndexExpr)* indexExpr | nameRef

private suffixCallExpr ::= <<twoExpr checkCallExpr>> callExpr | indexExpr
// 最终产生 callExpr
funcCall ::= (prefixExpr (suffixCallExpr)*) callExpr { methods = [guessType] }

args ::=  '(' (exprList)? ')' | tableConstructor | STRING {
    pin(".*") = 1
}

lambdaFuncDef ::= 'function' funcBody { pin = 1 }

funcBody ::= '(' (parList)? ')' lazy_block? 'end' { pin = 1 }

parDef ::= ID | SELF {
    extends = nameDef
    methods = [resolveType]
    implements = "com.tang.intellij.lua.psi.LuaTypeResolvable"
}
private parList ::= parDef (',' parDef)* (',' '...')? | '...'

tableConstructor ::= '{' (fieldList)? '}' {
    pin = 1
    methods = [findField]
}

fieldList ::= field (fieldSep field)* (fieldSep)?

field ::= '[' expr ']' '=' expr | nameDef '=' expr | expr

fieldSep ::= ',' | ';'

binop ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' |
     '<' | '<=' | '>' | '>=' | '==' | '~=' |
     'and' | 'or'

unop ::= '-' | 'not' | '#'

nameDef ::= ID {
    implements = "com.tang.intellij.lua.psi.LuaNamedElement,com.tang.intellij.lua.psi.LuaTypeResolvable"
    methods = [setName getName resolveType]
}
nameRef ::= ID | SELF {
    implements = "com.tang.intellij.lua.psi.LuaNamedElement"
    methods = [setName getName getReference resolve resolveType]
}