{
  parserClass="com.tang.intellij.lua.parser.LuaParser"

  implements="com.tang.intellij.lua.psi.LuaPsiElement"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lua"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.psi"
  psiImplPackage="com.tang.intellij.lua.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.psi.LuaPsiImplUtil"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.psi.LuaTypes"
  elementTypeClass="com.tang.intellij.lua.psi.LuaElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createType"
  tokenTypeClass="com.tang.intellij.lua.psi.LuaTokenType"
  tokenTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createToken"

  tokens = [
        /* Keywords */
        AND = "and"
        BREAK = "break"
        DO = "do"
        ELSE = "else"
        ELSEIF = "elseif"
        END = "end"
        FALSE = "false"
        FOR = "for"
        FUNCTION = "function"
        IF = "if"
        IN = "in"
        LOCAL = "local"
        NIL = "nil"
        NOT = "not"
        OR = "or"
        REPEAT = "repeat"
        RETURN = "return"
        THEN = "then"
        TRUE = "true"
        UNTIL = "until"
        WHILE = "while"
        SELF = "self"

        SHEBANG = "#!"
        ELLIPSIS = "..."
        CONCAT = ".."
        EQ = "=="
        GE = ">="
        LE = "<="
        NE = "~="
        MINUS = "-"
        PLUS = "+"
        MULT = "*"
        MOD = "%"
        DIV = "/"
        ASSIGN = "="
        GT = ">"
        LT = "<"
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LCURLY = "{"
        RCURLY = "}"
        GETN = "#"
        COMMA = ","
        SEMI = ";"
        COLON = ":"
        DOT = "."
        EXP = "^"

        SHORT_COMMENT="SHORT_COMMENT"
        LUADOC_COMMENT="LUADOC_COMMENT"
        ID="ID"
        NUMBER="NUMBER"
        STRING = "STRING"
  ]

  implements(".*Def") = "com.tang.intellij.lua.psi.LuaDeclaration"
}

luaFile ::= (SHORT_COMMENT | LUADOC_COMMENT | stat)*

private chunk ::= (stat ';'?)* (lastStat ';'?)?

block ::= chunk

private stat ::=
    assignStat |
    funcCall |
    doStat |
    whileStat |
    repeatStat |
    ifStat |
    forAStat |
    forBStat |
    globalFuncDef |
    localFuncDef |
    localDef |
    lastStat |
    errorStat

assignStat ::= varList '=' exprList { pin = 2 }
doStat ::= 'do' block 'end' { pin = 1 }
whileStat ::= 'while' expr 'do' block 'end' { pin = 1 }
repeatStat ::= 'repeat' block 'until' expr { pin = 1 }
ifStat ::= 'if' expr 'then' block ('elseif' expr 'then' block)* ('else' block)? 'end' { pin = 1 }
forAStat ::= 'for' ID '=' expr ',' expr (',' expr)? 'do' block 'end' { pin = 3 }
forBStat ::= 'for' nameList 'in' exprList 'do' block 'end' { pin = 3 }
globalFuncDef ::= 'function' funcName funcBody {
    pin = 1
    methods = [getComment]
    stubClass = "com.tang.intellij.lua.psi.stub.LuaGlobalFuncStub"
}
localFuncDef ::= 'local' 'function' nameDef funcBody {
    pin = 2
    methods = [getComment]
}
localDef ::= 'local' nameList ('=' exprList)? {
    pin = 2
    methods = [getComment]
}

lastStat ::= return exprList? | break

funcName ::= nameRef ('.' nameRef)* (':' ID)?

varList ::= var (',' var)*

nameList ::= nameDef (',' nameDef)*

exprList ::= (expr ',')* expr

value ::= nil | false | true | NUMBER | STRING | "..." | func | tableConstructor | funcCall | var | '(' expr ')'

expr ::= unop expr | value (binop expr)?

private prefixExpr ::= '(' expr ')' | nameRef

indexExpr ::= '[' expr ']' | '.' ID

callExpr ::= args | ':' ID args

private suffixIndexExpr ::= callExpr | <<twoExpr indexExpr>> indexExpr
var ::= prefixExpr (suffixIndexExpr)* indexExpr | nameRef

private suffixCallExpr ::= <<twoExpr callExpr>> callExpr | indexExpr
funcCall ::= prefixExpr (suffixCallExpr)* callExpr

args ::=  '(' (exprList)? ')' | tableConstructor | STRING {
    methods = [getArgType]
}

func ::= 'function' funcBody

funcBody ::= '(' (parList)? ')' block? 'end' { pin = 1 }

parList ::= nameList (',' '...')? | '...'

tableConstructor ::= '{' (fieldList)? '}'

fieldList ::= field (fieldSep field)* (fieldSep)?

field ::= '[' expr ']' '=' expr | ID '=' expr | expr

fieldSep ::= ',' | ';'

binop ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' |
     '<' | '<=' | '>' | '>=' | '==' | '~=' |
     'and' | 'or'

unop ::= '-' | 'not' | '#'

nameDef ::= ID {
    implements = "com.tang.intellij.lua.psi.LuaNamedElement"
    methods = [setName getName]
}
nameRef ::= ID | SELF {
    methods = [getReference]
}

errorStat ::= ID | 'local' | 'for' {
    implements = "com.intellij.psi.PsiErrorElement"
    methods = [getErrorDescription]
}