{
  parserClass="com.tang.intellij.lua.doc.parser.LuaDocParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.tang.intellij.lua.doc.psi.LuaDocPsiElement"

  psiClassPrefix="LuaDoc"
  psiImplClassSuffix="Impl"
  psiPackage="com.tang.intellij.lua.doc.psi"
  psiImplPackage="com.tang.intellij.lua.doc.psi.impl"
  psiImplUtilClass="com.tang.intellij.lua.doc.psi.LuaDocPsiImplUtil"

  parserUtilClass="com.tang.intellij.lua.psi.LuaParserUtil"
  elementTypeHolderClass="com.tang.intellij.lua.doc.psi.LuaDocTypes"
  elementTypeClass="com.tang.intellij.lua.doc.psi.LuaDocElementType"
  elementTypeFactory="com.tang.intellij.lua.lang.LuaParserDefinition.createDocType"
  tokenTypeClass="com.tang.intellij.lua.doc.psi.LuaDocTokenType"

  tokens = [
  ID = 'ID'
  AT = '@'
  EQ = '='
  GETN = '--'
  COMMA = ','
  TAG_NAME = 'TAG_NAME'
  TAG_PARAM = 'param'
  TAG_RETURN = 'return'
  PRIVATE = 'private'
  PUBLIC = 'public'
  CLASS = 'class'
  EXTENDS = "extends"
  INTERFACE = 'interface'
  DASHES = 'DASHES'
  STRING = 'STRING'
  ]
}

doc ::= (DASHES doc_item?)*

private doc_item ::= '@' (param_def | return_def | tag_def | class_def) comment_string?

//--- tag
tag_value ::= ID
tag_def ::= TAG_NAME tag_value { pin = 1 }

//--- param
param_name_ref ::= ID {
    methods = [getReference]
}
param_def ::= TAG_PARAM param_name_ref class_name_ref {
    pin = 1
    methods = [resolveType]
}

//--- return
type_list ::= class_name_ref (',' class_name_ref)?
return_def ::= TAG_RETURN type_list

//---- class
class_name ::= ID {
    implements = "com.tang.intellij.lua.doc.psi.LuaDocNamedElement"
    methods = [getName setName]
}
class_name_ref ::= ID {
    methods = [getReference]
}
class_def ::= CLASS class_name (EXTENDS class_name_ref)?  {
    pin = 2
    stubClass = "com.tang.intellij.lua.psi.stub.LuaClassDefStub"
}

comment_string ::= GETN STRING?