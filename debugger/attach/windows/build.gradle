apply plugin: 'assembler'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'visual-studio'

def PATH_WINDOWS_KITS = "C:/Program Files (x86)/Windows Kits/10"
model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
}
model {
    buildTypes {
        debug
        release
    }
}
model {
    components {
        arch(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/arch/"
                        include "*.cpp"
                    }
                }
            }
        }
        tinyxml(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/tinyxml"
                        include "*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src/tinyxml"
                    }
                }
            }
        }
        EasyHookDll(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs "src/EasyHookDll"
                        include "**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src/DriverShared"
                        srcDir "src/EasyHookDll"
                    }
                }
                c {
                    source {
                        srcDirs "src/EasyHookDll"
                        srcDirs "src/DriverShared"
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDir "src/DriverShared"
                        srcDir "src/EasyHookDll"
                    }
                }
                binaries.all {
                    cppCompiler.define "_UNICODE"
                    cppCompiler.define "UNICODE"
                    cppCompiler.define "EASYHOOK_EXPORTS"
                    cCompiler.define "EASYHOOK_EXPORTS"
                    if (targetPlatform == platforms.x86) {
                        linker.args "Aux_ulib_x86.lib"
                    } else {
                        linker.args "Aux_ulib_x64.lib"
                    }
                    linker.args "psapi.lib"
                    linker.args "/LIBPATH:src/EasyHookDll"
                    sources {
                        platformAsm(AssemblerSourceSet) {
                            source {
                                srcDirs "src/DriverShared/ASM"
                                if (targetPlatform == platforms.x86) {
                                    include "HookSpecific_x86.asm"
                                } else {
                                    include "HookSpecific_x64.asm"
                                }
                            }
                        }
                    }
                }
            }
        }
        Shared(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/Shared"
                        include "*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src/Shared"
                    }
                    lib library:"tinyxml", linkage: 'static'
                }
            }
        }
        Debugger(NativeExecutableSpec) {
            sources.cpp {
                source {
                    srcDir "src/Debugger/"
                    include "*.cpp"
                }
                lib library:"tinyxml", linkage: 'static'
                lib library:"Shared", linkage: 'static'
            }
            binaries.all {
                linker.args "user32.lib", "imagehlp.lib", "Advapi32.lib"
            }
        }

        all {
            targetPlatform "x86"
            targetPlatform "x64"
            sources {
                cpp {
                    exportedHeaders {
                        srcDir "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/include"
                        srcDir "${PATH_WINDOWS_KITS}/Include/10.0.10240.0/ucrt"
                        srcDir "c:/Program Files (x86)/Windows Kits/8.1/Include/shared"
                    }
                }
                c {
                    exportedHeaders {
                        srcDir "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/include"
                        srcDir "${PATH_WINDOWS_KITS}/Include/10.0.10240.0/ucrt"
                        srcDir "c:/Program Files (x86)/Windows Kits/8.1/Include/shared"
                    }
                }
            }
        }
    }

    binaries {
        all {
            if (targetPlatform == platforms.x86) {
                linker.args "/LIBPATH:${PATH_WINDOWS_KITS}/Lib/10.0.10240.0/ucrt/x86"
                linker.args "/LIBPATH:C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/lib"
            } else {
                linker.args "/LIBPATH:${PATH_WINDOWS_KITS}/Lib/10.0.10240.0/ucrt/x64"
                linker.args "/LIBPATH:C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/lib/amd64"
            }
            cppCompiler.args "/EHsc"
            cppCompiler.args "/MTd"
            cCompiler.args "/MTd"

            cppCompiler.define "TIXML_USE_STL"
            cppCompiler.define "_MBCS"
            cppCompiler.define "_USRDLL"
            cppCompiler.define "_CRT_SECURE_NO_WARNINGS"
            cppCompiler.define "_SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS"
            if (buildType == buildTypes.debug) {
                cppCompiler.args '/Zi'
                cppCompiler.define 'DEBUG'
                linker.args '/DEBUG'
            }
        }
        withType(SharedLibraryBinarySpec) {
            //if (toolChain in VisualCpp) {
                cppCompiler.define "_WINDLL"
                cppCompiler.define "DLL_EXPORT"
            //}
        }
    }
}