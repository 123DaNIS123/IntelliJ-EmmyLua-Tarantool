/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_NAME = 4;
  public static final int xCOMMENT_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\10\1\4\1\1\22\0\1\3\2\0\1\35\4\0\1\42\1\43\2\0\1\34\1\7\1"+
    "\5\1\0\12\5\1\36\1\0\1\41\1\0\1\40\1\0\1\6\32\5\1\46\1\0\1\47\1\0\1\5\1\0"+
    "\1\23\1\33\1\25\1\15\1\13\1\11\1\30\1\5\1\12\2\5\1\14\1\24\1\21\1\31\1\22"+
    "\1\5\1\16\1\26\1\17\1\20\1\32\2\5\1\27\1\5\1\44\1\37\1\45\7\0\1\10\242\0\2"+
    "\10\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\2\7\1\10\1\11\3\10\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\6\12\24"+
    "\1\25\4\10\1\26\13\24\1\27\4\10\12\24\1\30"+
    "\1\24\4\10\3\24\1\31\7\24\4\10\1\32\5\24"+
    "\1\33\1\24\1\34\1\24\2\10\1\35\1\10\1\24"+
    "\1\36\2\24\1\37\1\40\1\24\1\41\2\10\1\24"+
    "\1\42\2\24\1\10\1\43\1\44\1\24\1\45\1\46"+
    "\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\240\0\360"+
    "\0\240\0\u0118\0\240\0\u0140\0\240\0\u0168\0\240\0\u0190"+
    "\0\u01b8\0\u01e0\0\240\0\240\0\240\0\240\0\240\0\240"+
    "\0\240\0\240\0\240\0\240\0\u0208\0\u0230\0\u0258\0\u0280"+
    "\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u0118"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\240\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0"+
    "\0\u0168\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0230"+
    "\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960"+
    "\0\u0230\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0230\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0230\0\u0c08\0\u0230\0\u0c30\0\u0c58\0\u0c80"+
    "\0\u0168\0\u0ca8\0\u0cd0\0\u0230\0\u0cf8\0\u0d20\0\u0230\0\u0230"+
    "\0\u0d48\0\u0168\0\u0d70\0\u0d98\0\u0dc0\0\u0230\0\u0de8\0\u0e10"+
    "\0\u0e38\0\u0168\0\u0230\0\u0e60\0\u0230\0\u0168\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\10\1\5\1\11\1\12\1\0"+
    "\37\5\1\13\1\14\1\15\2\10\1\16\1\17\2\13"+
    "\1\20\10\16\1\21\6\16\1\22\2\16\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\13\1\14\1\15\2\10\1\36\3\13\1\37"+
    "\2\36\1\40\1\36\1\41\1\42\2\36\1\43\1\36"+
    "\1\44\1\45\1\46\2\36\1\47\2\36\14\13\1\4"+
    "\2\0\1\4\1\0\43\4\52\0\1\7\50\0\2\10"+
    "\52\0\1\50\42\0\1\15\52\0\1\16\3\0\23\16"+
    "\21\0\1\16\3\0\7\16\1\51\13\16\21\0\1\16"+
    "\3\0\5\16\1\52\1\16\1\53\13\16\21\0\1\16"+
    "\3\0\11\16\1\54\11\16\63\0\1\55\5\0\1\36"+
    "\3\0\23\36\21\0\1\36\3\0\1\36\1\56\21\36"+
    "\21\0\1\36\3\0\12\36\1\57\10\36\21\0\1\36"+
    "\3\0\2\36\1\60\20\36\21\0\1\36\3\0\16\36"+
    "\1\61\4\36\21\0\1\36\3\0\5\36\1\62\1\36"+
    "\1\63\2\36\1\64\10\36\21\0\1\36\3\0\20\36"+
    "\1\65\2\36\21\0\1\36\3\0\3\36\1\66\17\36"+
    "\21\0\1\36\3\0\2\36\1\67\20\36\21\0\1\36"+
    "\3\0\21\36\1\70\1\36\21\0\1\16\3\0\10\16"+
    "\1\71\12\16\21\0\1\16\3\0\1\16\1\72\16\16"+
    "\1\73\2\16\21\0\1\16\3\0\22\16\1\74\21\0"+
    "\1\16\3\0\6\16\1\75\14\16\21\0\1\36\3\0"+
    "\2\36\1\76\20\36\21\0\1\36\3\0\10\36\1\77"+
    "\12\36\21\0\1\36\3\0\6\36\1\100\14\36\21\0"+
    "\1\36\3\0\11\36\1\101\11\36\21\0\1\36\3\0"+
    "\1\36\1\102\16\36\1\103\2\36\21\0\1\36\3\0"+
    "\22\36\1\104\21\0\1\36\3\0\5\36\1\105\15\36"+
    "\21\0\1\36\3\0\4\36\1\106\16\36\21\0\1\36"+
    "\3\0\12\36\1\107\10\36\21\0\1\36\3\0\2\36"+
    "\1\110\20\36\21\0\1\36\3\0\2\36\1\111\20\36"+
    "\21\0\1\16\3\0\21\16\1\112\1\16\21\0\1\16"+
    "\3\0\6\16\1\113\14\16\21\0\1\16\3\0\3\16"+
    "\1\114\17\16\21\0\1\16\3\0\1\16\1\115\21\16"+
    "\21\0\1\36\3\0\3\36\1\116\17\36\21\0\1\36"+
    "\3\0\17\36\1\117\3\36\21\0\1\36\3\0\7\36"+
    "\1\120\13\36\21\0\1\36\3\0\2\36\1\121\20\36"+
    "\21\0\1\36\3\0\21\36\1\122\1\36\21\0\1\36"+
    "\3\0\6\36\1\123\14\36\21\0\1\36\3\0\3\36"+
    "\1\124\17\36\21\0\1\36\3\0\12\36\1\125\10\36"+
    "\21\0\1\36\3\0\7\36\1\126\13\36\21\0\1\36"+
    "\3\0\15\36\1\127\5\36\21\0\1\36\3\0\5\36"+
    "\1\130\15\36\21\0\1\16\3\0\12\16\1\131\10\16"+
    "\21\0\1\16\3\0\2\16\1\132\20\16\21\0\1\16"+
    "\3\0\1\16\1\133\21\16\21\0\1\16\3\0\20\16"+
    "\1\134\2\16\21\0\1\36\3\0\4\36\1\135\16\36"+
    "\21\0\1\36\3\0\7\36\1\136\13\36\21\0\1\36"+
    "\3\0\5\36\1\137\15\36\21\0\1\36\3\0\12\36"+
    "\1\140\10\36\21\0\1\36\3\0\2\36\1\141\20\36"+
    "\21\0\1\36\3\0\1\36\1\142\21\36\21\0\1\36"+
    "\3\0\13\36\1\143\7\36\21\0\1\36\3\0\3\36"+
    "\1\144\17\36\21\0\1\36\3\0\15\36\1\145\5\36"+
    "\21\0\1\36\3\0\3\36\1\146\17\36\21\0\1\16"+
    "\3\0\6\16\1\147\14\16\21\0\1\16\3\0\14\16"+
    "\1\150\6\16\21\0\1\16\3\0\14\16\1\151\6\16"+
    "\21\0\1\16\3\0\10\16\1\152\12\16\21\0\1\36"+
    "\3\0\12\36\1\153\10\36\21\0\1\36\3\0\10\36"+
    "\1\154\12\36\21\0\1\36\3\0\6\36\1\155\14\36"+
    "\21\0\1\36\3\0\14\36\1\156\6\36\21\0\1\36"+
    "\3\0\14\36\1\157\6\36\21\0\1\36\3\0\2\36"+
    "\1\160\20\36\21\0\1\36\3\0\20\36\1\161\2\36"+
    "\21\0\1\16\3\0\2\16\1\162\20\16\21\0\1\16"+
    "\3\0\6\16\1\163\14\16\21\0\1\16\3\0\12\16"+
    "\1\164\10\16\21\0\1\36\3\0\17\36\1\165\3\36"+
    "\21\0\1\36\3\0\2\36\1\166\20\36\21\0\1\36"+
    "\3\0\6\36\1\167\14\36\21\0\1\36\3\0\12\36"+
    "\1\170\10\36\21\0\1\16\3\0\2\16\1\171\20\16"+
    "\21\0\1\16\3\0\3\16\1\172\17\16\21\0\1\36"+
    "\3\0\2\36\1\173\20\36\21\0\1\36\3\0\2\36"+
    "\1\174\20\36\21\0\1\36\3\0\4\36\1\175\16\36"+
    "\21\0\1\16\3\0\4\16\1\176\16\16\21\0\1\36"+
    "\3\0\4\36\1\177\16\36\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\12\11\20\1"+
    "\1\11\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public _LuaDocLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 40: break;
          case 2: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 41: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 5: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 7: 
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 47: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return SHARP;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return EXTENDS;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return OR;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return GT;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return LT;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return LCURLY;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return RCURLY;
            } 
            // fall through
          case 58: break;
          case 20: 
            { yybegin(xTAG); return TAG_NAME;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return DASHES;
            } 
            // fall through
          case 60: break;
          case 22: 
            { return ARR;
            } 
            // fall through
          case 61: break;
          case 23: 
            { return FUN;
            } 
            // fall through
          case 62: break;
          case 24: 
            { yybegin(xTAG); return TAG_SEE;
            } 
            // fall through
          case 63: break;
          case 25: 
            { yybegin(xTAG); return TAG_TYPE;
            } 
            // fall through
          case 64: break;
          case 26: 
            { yybegin(xTAG); return TAG_FIELD;
            } 
            // fall through
          case 65: break;
          case 27: 
            { yybegin(xTAG); return TAG_PARAM;
            } 
            // fall through
          case 66: break;
          case 28: 
            { yybegin(xTAG); return TAG_CLASS;
            } 
            // fall through
          case 67: break;
          case 29: 
            { yybegin(xTAG); return PUBLIC;
            } 
            // fall through
          case 68: break;
          case 30: 
            { yybegin(xTAG); return TAG_RETURN;
            } 
            // fall through
          case 69: break;
          case 31: 
            { yybegin(xTAG); return TAG_PUBLIC;
            } 
            // fall through
          case 70: break;
          case 32: 
            { yybegin(xTAG); return TAG_MODULE;
            } 
            // fall through
          case 71: break;
          case 33: 
            { yybegin(xTAG); return PRIVATE;
            } 
            // fall through
          case 72: break;
          case 34: 
            { yybegin(xTAG); return TAG_PRIVATE;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return OPTIONAL;
            } 
            // fall through
          case 74: break;
          case 36: 
            { yybegin(xTAG); return TAG_LANGUAGE;
            } 
            // fall through
          case 75: break;
          case 37: 
            { yybegin(xTAG); return TAG_OVERLOAD;
            } 
            // fall through
          case 76: break;
          case 38: 
            { yybegin(xTAG); return PROTECTED;
            } 
            // fall through
          case 77: break;
          case 39: 
            { yybegin(xTAG); return TAG_PROTECTED;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
