From 491398c1a2ab1d8e9b8aaba981e807cedf82238a Mon Sep 17 00:00:00 2001
From: tangzx <272669294@qq.com>
Date: Sun, 11 Feb 2018 15:36:24 +0800
Subject: [PATCH] compatible with 171

---
 .../intellij/lua/editor/LuaBreadcrumbsProvider.kt  | 86 ----------------------
 .../lua/project/LuaAdditionalSourcesRootPanel.kt   |  2 +-
 .../com/tang/intellij/lua/project/LuaModuleType.kt |  5 +-
 src/main/resources/META-INF/plugin.xml             |  1 -
 4 files changed, 2 insertions(+), 92 deletions(-)
 delete mode 100644 src/main/java/com/tang/intellij/lua/editor/LuaBreadcrumbsProvider.kt

diff --git a/src/main/java/com/tang/intellij/lua/editor/LuaBreadcrumbsProvider.kt b/src/main/java/com/tang/intellij/lua/editor/LuaBreadcrumbsProvider.kt
deleted file mode 100644
index 73d8bf0d..00000000
--- a/src/main/java/com/tang/intellij/lua/editor/LuaBreadcrumbsProvider.kt
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tang.intellij.lua.editor
-
-import com.intellij.lang.Language
-import com.intellij.psi.PsiElement
-import com.intellij.psi.util.PsiTreeUtil
-import com.intellij.ui.breadcrumbs.BreadcrumbsProvider
-import com.tang.intellij.lua.lang.LuaLanguage
-import com.tang.intellij.lua.psi.*
-
-class LuaBreadcrumbsProvider : BreadcrumbsProvider {
-    override fun getLanguages(): Array<Language> {
-        return arrayOf(LuaLanguage.INSTANCE)
-    }
-
-    private val MAX_LEN = 15
-
-    private fun cutText(txt: String): String {
-        var t = txt
-        if (t.length > MAX_LEN) {
-            t = t.substring(0, MAX_LEN) + "..."
-        }
-        return t
-    }
-
-    override fun getElementInfo(element: PsiElement): String {
-        return when (element) {
-            is LuaBlock -> {
-                val blockParent = element.parent
-                when (blockParent) {
-                    is LuaFuncBody ->{
-                        val parent2 = blockParent.parent
-                        when (parent2) {
-                            is LuaClassMethodDef -> "${parent2.classMethodName.text}${parent2.paramSignature}"
-                            is LuaClosureExpr -> "function${parent2.paramSignature}"
-                            is LuaLocalFuncDef -> "local function ${parent2.name}"
-                            else -> "<?>"
-                        }
-                    }
-                    is LuaIfStat -> {
-                        val prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(element)
-                        when (prevVisibleLeaf?.node?.elementType) {
-                            LuaTypes.ELSE -> "else"
-                            LuaTypes.THEN -> {
-                                val expr = LuaPsiTreeUtil.skipWhitespacesAndCommentsBackward(prevVisibleLeaf)!!
-                                val prefix = LuaPsiTreeUtil.skipWhitespacesAndCommentsBackward(expr)!!
-
-                                "${prefix.text} ${cutText(expr.text)} then"
-                            }
-                            else -> "if"
-                        }
-                    }
-                    is LuaForAStat -> "for"
-                    is LuaForBStat -> "for"
-                    is LuaRepeatStat -> "repeat"
-                    is LuaWhileStat -> "while"
-                    else -> "<?>"
-                }
-            }
-            else -> element.text
-        }
-    }
-
-    override fun acceptElement(element: PsiElement): Boolean {
-        return when (element) {
-            is LuaBlock -> true
-            else -> false
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/src/main/java/com/tang/intellij/lua/project/LuaAdditionalSourcesRootPanel.kt b/src/main/java/com/tang/intellij/lua/project/LuaAdditionalSourcesRootPanel.kt
index 059b0cae..5800ef83 100644
--- a/src/main/java/com/tang/intellij/lua/project/LuaAdditionalSourcesRootPanel.kt
+++ b/src/main/java/com/tang/intellij/lua/project/LuaAdditionalSourcesRootPanel.kt
@@ -28,7 +28,7 @@ import javax.swing.ListSelectionModel
 
 class LuaAdditionalSourcesRootPanel : JPanel(BorderLayout()) {
     private val dataModel = DefaultListModel<String>()
-    private val pathList = JBList(dataModel)
+    private val pathList = JBList<String>(dataModel)
     init {
         pathList.selectionMode = ListSelectionModel.SINGLE_SELECTION
 
diff --git a/src/main/java/com/tang/intellij/lua/project/LuaModuleType.kt b/src/main/java/com/tang/intellij/lua/project/LuaModuleType.kt
index 864ece09..1d2d36f7 100644
--- a/src/main/java/com/tang/intellij/lua/project/LuaModuleType.kt
+++ b/src/main/java/com/tang/intellij/lua/project/LuaModuleType.kt
@@ -27,10 +27,7 @@ import javax.swing.Icon
  * Created by tangzx on 2016/12/24.
  */
 class LuaModuleType : ModuleType<LuaModuleBuilder>(MODULE_TYPE) {
-
-    // IDEA-171
-    val bigIcon: Icon
-        get() = LuaIcons.MODULE
+    override fun getBigIcon(): Icon = LuaIcons.MODULE
 
     override fun createModuleBuilder() = LuaModuleBuilder()
 
diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
index 4e65a43d..9c677eb8 100644
--- a/src/main/resources/META-INF/plugin.xml
+++ b/src/main/resources/META-INF/plugin.xml
@@ -207,7 +207,6 @@
         <!--navigate-->
         <gotoClassContributor implementation="com.tang.intellij.lua.editor.LuaClassNavigationContributor"/>
         <gotoSymbolContributor implementation="com.tang.intellij.lua.editor.LuaSymbolNavigationContributor"/>
-        <breadcrumbsInfoProvider implementation="com.tang.intellij.lua.editor.LuaBreadcrumbsProvider"/>
 
         <!--completion-->
         <completion.contributor language="Lua" implementationClass="com.tang.intellij.lua.editor.completion.LuaDocCompletionContributor"/>
-- 
2.15.1.windows.2

